name: stow emoji data

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'Base URL for the API'
        required: false
        default: 'https://mojistow.mojis.dev'
        type: choice
        options:
          - "https://mojistow.mojis.dev"
          - "https://mojistow.preview.mojis.dev"

      versions:
        description: 'Specific versions to process (comma-separated, leave empty for all)'
        required: false
        default: ""
        type: string
  schedule:
    # Run daily at 15:20 UTC
    - cron: "20 15 * * *"

permissions: {}

jobs:
  stow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: process emoji data
        env:
          API_KEY: ${{ secrets.MOJI_STOW_API_KEY }}
          API_BASE_URL: ${{ github.event.inputs.base_url || 'https://mojistow.mojis.dev' }}
          SPECIFIC_VERSIONS: ${{ github.event.inputs.versions }}
          # directories to process as a single unit
          BULK_DIRS: "metadata"
        run: |
          # find all available versions
          ALL_VERSIONS=$(ls data)

          # determine which versions to process
          if [ -z "$SPECIFIC_VERSIONS" ]; then
            VERSIONS_TO_PROCESS="$ALL_VERSIONS"
            echo "Processing all available versions: $VERSIONS_TO_PROCESS"
          else
            # convert comma-separated list to space-separated
            VERSIONS_TO_PROCESS=$(echo "$SPECIFIC_VERSIONS" | tr ',' ' ')
            echo "Processing specific versions: $VERSIONS_TO_PROCESS"

            # validate that specified versions exist
            for version in $VERSIONS_TO_PROCESS; do
              if ! echo "$ALL_VERSIONS" | grep -q "\b$version\b"; then
                echo "⚠️ Warning: Version '$version' not found in data directory"
              fi
            done
          fi

          for version in $VERSIONS_TO_PROCESS; do
            if [ ! -d "./data/$version" ]; then
              echo "⚠️ Skipping version '$version' as it doesn't exist"
              continue
            fi
            echo "processing version: $version"

            # fetch all hashes for this version at once
            HASHES_RESPONSE=$(curl -s -w "%{http_code}" "$API_BASE_URL/hashes/$version")
            HASHES_HTTP_CODE=${HASHES_RESPONSE: -3}

            if [ "$HASHES_HTTP_CODE" != "200" ]; then
              echo "Failed to fetch hashes for version $version (HTTP $HASHES_HTTP_CODE)"
              echo "Continuing with empty hashes..."
              HASHES_JSON="[]"
            else
              HASHES_JSON=${HASHES_RESPONSE%???}
            fi

            # first process bulk directories
            for bulk_dir in $BULK_DIRS; do
              if [ -d "./data/$version/$bulk_dir" ]; then
                echo "Processing bulk directory: $bulk_dir"

                # create a hash for the entire directory
                DIR_HASH=$(find "./data/$version/$bulk_dir" -type f -exec sha256sum {} \; | sort | sha256sum | cut -d" " -f1)
                echo "Directory hash for $bulk_dir: $DIR_HASH"

                # check if directory hash exists and matches
                DIR_API_HASH=$(echo "$HASHES_JSON" | jq -r ".[] | select(.item==\"$bulk_dir\") | .hash" 2>/dev/null || echo "")

                if [ -n "$DIR_API_HASH" ] && [ "$DIR_HASH" = "$DIR_API_HASH" ]; then
                  echo "hash unchanged for directory $bulk_dir - skipping"
                  continue
                fi

                echo "hash needs updating for directory $bulk_dir"

                # create tar+gzip file for the entire directory
                TMP_DIR=$(mktemp -d)
                mkdir -p "$TMP_DIR/$version"
                cp -r "./data/$version/$bulk_dir" "$TMP_DIR/$version/$bulk_dir"

                TAR_FILE="/tmp/emoji_data_${version}_${bulk_dir}.tar.gz"
                tar -czf "$TAR_FILE" -C "$TMP_DIR/$version" "$bulk_dir"

                echo "Created archive for directory: $TAR_FILE"

                # upload the tar+gzip file
                UPLOAD_RESULT=$(curl -s -X POST "$API_BASE_URL/stow/$version" \
                  -H "Authorization: $API_KEY" \
                  -F "file=@$TAR_FILE" \
                  -w "%{http_code}")

                UPLOAD_HTTP_CODE=${UPLOAD_RESULT: -3}

                if [ "$UPLOAD_HTTP_CODE" = "200" ] || [ "$UPLOAD_HTTP_CODE" = "201" ]; then
                  echo "✅ successfully uploaded directory $bulk_dir"

                  # update the hash in the hash API
                  DIR_UPLOAD_RESULT=$(curl -s -X POST "$API_BASE_URL/hashes" \
                    -H "Authorization: $API_KEY" \
                    -H "Content-Type: application/json" \
                    -d "{\"hash\": \"$DIR_HASH\", \"version\": \"$version\", \"item\": \"$bulk_dir\"}" \
                    -w "%{http_code}")

                  if [ "${DIR_UPLOAD_RESULT: -3}" = "200" ] || [ "${DIR_UPLOAD_RESULT: -3}" = "201" ]; then
                    echo "✅ successfully updated hash for directory $bulk_dir"
                  else
                    echo "❌ failed to update hash for directory $bulk_dir (HTTP ${DIR_UPLOAD_RESULT: -3})"
                    echo "api response: ${DIR_UPLOAD_RESULT%???}"
                    exit 1
                  fi
                else
                  echo "❌ failed to upload directory $bulk_dir (HTTP $UPLOAD_HTTP_CODE)"
                  echo "api response: ${UPLOAD_RESULT%???}"
                  exit 1
                fi

                # clean up
                rm -rf "$TMP_DIR" "$TAR_FILE"
              fi
            done

            # now process individual files (excluding the bulk directories)
            FILES=$(find ./data/$version -type f | grep -v -E "\/($BULK_DIRS)\/" | sort)

            for file_path in $FILES; do
              # get the relative path from the version directory
              relative_path=${file_path#./data/$version/}

              # skip files in bulk directories (already processed)
              if echo "$relative_path" | grep -q -E "^($BULK_DIRS)/"; then
                continue
              fi

              # generate hash for the file
              FILE_HASH=$(sha256sum "$file_path" | cut -d" " -f1)

              echo "hash for $relative_path: $FILE_HASH"

              # check if file hash exists and matches
              FILE_API_HASH=$(echo "$HASHES_JSON" | jq -r ".[] | select(.item==\"$relative_path\") | .hash" 2>/dev/null || echo "")

              if [ -n "$FILE_API_HASH" ] && [ "$FILE_HASH" = "$FILE_API_HASH" ]; then
                echo "hash unchanged for $relative_path - skipping"
                continue
              fi

              echo "hash needs updating for $relative_path"

              # create a temporary directory for the file
              TMP_DIR=$(mktemp -d)
              mkdir -p "$TMP_DIR/$version/$(dirname "$relative_path")"
              cp "$file_path" "$TMP_DIR/$version/$relative_path"

              # create tar+gzip file
              TAR_FILE="/tmp/emoji_data_${version}_${relative_path//\//_}.tar.gz"
              tar -czf "$TAR_FILE" -C "$TMP_DIR/$version" "$relative_path"

              echo "Created archive: $TAR_FILE"

              # upload the tar+gzip file to the upload endpoint
              UPLOAD_RESULT=$(curl -s -X POST "$API_BASE_URL/stow/$version" \
                -H "Authorization: $API_KEY" \
                -F "file=@$TAR_FILE" \
                -w "%{http_code}")

              UPLOAD_HTTP_CODE=${UPLOAD_RESULT: -3}

              if [ "$UPLOAD_HTTP_CODE" = "200" ] || [ "$UPLOAD_HTTP_CODE" = "201" ]; then
                echo "✅ successfully uploaded file for $relative_path"

                # also update the hash in the hash API
                FILE_UPLOAD_RESULT=$(curl -s -X POST "$API_BASE_URL/hashes" \
                  -H "Authorization: $API_KEY" \
                  -H "Content-Type: application/json" \
                  -d "{\"hash\": \"$FILE_HASH\", \"version\": \"$version\", \"item\": \"$relative_path\"}" \
                  -w "%{http_code}")

                if [ "${FILE_UPLOAD_RESULT: -3}" = "200" ] || [ "${FILE_UPLOAD_RESULT: -3}" = "201" ]; then
                  echo "✅ successfully updated hash for $relative_path"
                else
                  echo "❌ failed to update hash for $relative_path (HTTP ${FILE_UPLOAD_RESULT: -3})"
                  echo "api response: ${FILE_UPLOAD_RESULT%???}"
                  exit 1
                fi
              else
                echo "❌ failed to upload file for $relative_path (HTTP $UPLOAD_HTTP_CODE)"
                echo "api response: ${UPLOAD_RESULT%???}"
                exit 1
              fi

              # clean up
              rm -rf "$TMP_DIR" "$TAR_FILE"
            done
          done

          echo "all hash processing completed successfully"
