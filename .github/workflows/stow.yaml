name: stow emoji data

on:
  workflow_dispatch:
  schedule:
    # Run daily at 15:20 UTC
    - cron: "20 15 * * *"

permissions: {}

jobs:
  stow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: process emoji data
        env:
          API_KEY: ${{ secrets.MOJI_STOW_API_KEY }}
          API_BASE_URL: "https://mojistow.mojis.dev/hashes"
          API_UPLOAD_URL: "https://mojistow.mojis.dev/stow"
        run: |
          # find all versions
          VERSIONS=$(ls data)
          echo "discovered versions: $VERSIONS"

          for version in $VERSIONS; do
            echo "processing version: $version"

            # Find all files recursively in the version directory
            FILES=$(find ./data/$version -type f | sort)

            for file_path in $FILES; do
              # get the relative path from the version directory
              relative_path=${file_path#./data/$version/}

              # generate hash for the file
              FILE_HASH=$(sha256sum "$file_path" | cut -d" " -f1)

              echo "hash for $relative_path: $FILE_HASH"

              # check if file hash exists in API
              FILE_RESPONSE=$(curl -s -w "%{http_code}" "$API_BASE_URL/$version/$relative_path")
              FILE_HTTP_CODE=${FILE_RESPONSE: -3}
              FILE_API_HASH=$(echo "${FILE_RESPONSE%???}" | jq -r ".hash" 2>/dev/null || echo "")

              if [ "$FILE_HTTP_CODE" = "200" ] && [ "$FILE_HASH" = "$FILE_API_HASH" ]; then
                echo "hash unchanged for $relative_path - skipping"
                continue
              fi

              echo "hash needs updating for $relative_path"

              # create a temporary directory for the file
              TMP_DIR=$(mktemp -d)
              mkdir -p "$TMP_DIR/$version/$(dirname "$relative_path")"
              cp "$file_path" "$TMP_DIR/$version/$relative_path"

              # create tar+gzip file
              TAR_FILE="/tmp/emoji_data_${version}_${relative_path//\//_}.tar.gz"
              tar -czf "$TAR_FILE" -C "$TMP_DIR" "$version"

              echo "Created archive: $TAR_FILE"

              # upload the tar+gzip file to the upload endpoint
              UPLOAD_RESULT=$(curl -s -X POST "$API_UPLOAD_URL/$version" \
                -H "Authorization: $API_KEY" \
                -F "file=@$TAR_FILE" \
                -w "%{http_code}")

              UPLOAD_HTTP_CODE=${UPLOAD_RESULT: -3}

              if [ "$UPLOAD_HTTP_CODE" = "200" ] || [ "$UPLOAD_HTTP_CODE" = "201" ]; then
                echo "✅ successfully uploaded file for $relative_path"

                # also update the hash in the hash API
                FILE_UPLOAD_RESULT=$(curl -s -X POST "$API_BASE_URL" \
                  -H "Authorization: $API_KEY" \
                  -H "Content-Type: application/json" \
                  -d "{\"hash\": \"$FILE_HASH\", \"version\": \"$version\", \"item\": \"$relative_path\"}" \
                  -w "%{http_code}")

                if [ "${FILE_UPLOAD_RESULT: -3}" = "200" ] || [ "${FILE_UPLOAD_RESULT: -3}" = "201" ]; then
                  echo "✅ successfully updated hash for $relative_path"
                else
                  echo "❌ failed to update hash for $relative_path (HTTP ${FILE_UPLOAD_RESULT: -3})"
                  echo "api response: ${FILE_UPLOAD_RESULT%???}"
                  exit 1
                fi
              else
                echo "❌ failed to upload file for $relative_path (HTTP $UPLOAD_HTTP_CODE)"
                echo "api response: ${UPLOAD_RESULT%???}"
                exit 1
              fi

              # Clean up
              rm -rf "$TMP_DIR" "$TAR_FILE"
            done
          done

          echo "all hash processing completed successfully"
