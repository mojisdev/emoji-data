name: Stow Emoji Data

on:
  workflow_dispatch:
  schedule:
    # Run daily at 15:20 UTC
    - cron: "20 15 * * *"

permissions: {}

jobs:
  stow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: find emoji versions
        id: find_versions
        run: |
          VERSIONS=$(ls data)
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT
          echo "found versions: $VERSIONS"

      - name: generate hashes
        id: generate_hashes
        env:
          VERSIONS: ${{ steps.find_versions.outputs.versions }}
        run: |
          for version in $VERSIONS; do
            HASH=$(git ls-files ./data/$version | xargs sha256sum | cut -d" " -f1 | sha256sum | cut -d" " -f1)
            echo "hash_$version=$HASH" >> $GITHUB_OUTPUT
            echo "generated hash for $version: $HASH"
          done

      - name: check existing hashes
        id: check_hashes
        env:
          VERSIONS: ${{ steps.find_versions.outputs.versions }}
        run: |
          API_BASE_URL="https://mojistow.mojis.dev/hashes"
          VERSIONS_TO_UPDATE=""

          for version in $VERSIONS; do
            HASH=$(echo "${{ steps.generate_hashes.outputs.hash_$version }}")

            echo "checking hash for $version: $HASH"

            # query the api and check if the hash exists
            RESPONSE=$(curl -s -o response_$version.json -w "%{http_code}" "$API_BASE_URL/$version")
            HTTP_CODE=$RESPONSE

            if [ "$HTTP_CODE" = "200" ]; then
              API_HASH=$(jq -r '.hash' response_$version.json)

              if [ "$HASH" = "$API_HASH" ]; then
                echo "hash unchanged for $version - no update needed"
              else
                echo "hash mismatch for $version - update needed"
                VERSIONS_TO_UPDATE="$VERSIONS_TO_UPDATE $version"
              fi
            else
              echo "no existing hash found for $version (HTTP $HTTP_CODE) - update needed"
              VERSIONS_TO_UPDATE="$VERSIONS_TO_UPDATE $version"
            fi
          done

          # trim leading space
          VERSIONS_TO_UPDATE="${VERSIONS_TO_UPDATE## }"
          echo "versions_to_update=$VERSIONS_TO_UPDATE" >> $GITHUB_OUTPUT
          echo "versions requiring updates: $VERSIONS_TO_UPDATE"

      - name: Update hashes
        if: ${{ steps.check_hashes.outputs.versions_to_update != '' }}
        env:
          API_KEY: ${{ secrets.MOJI_STOW_API_KEY }}
          API_BASE_URL: "https://mojistow.mojis.dev/hashes"
          VERSIONS_TO_UPDATE: ${{ steps.check_hashes.outputs.versions_to_update }}
        run: |
          echo "starting hash updates for: $VERSIONS_TO_UPDATE"

          for version in $VERSIONS_TO_UPDATE; do
            HASH=$(echo "${{ steps.generate_hashes.outputs.hash_$version }}")

            echo "uploading new hash for $version: $HASH"

            # upload the new hash to the API
            UPLOAD_RESULT=$(curl -s -X POST "$API_BASE_URL/$version" \
              -H "Authorization: $API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"hash\": \"$HASH\"}" \
              -w "%{http_code}")

            if [ "${UPLOAD_RESULT: -3}" = "200" ] || [ "${UPLOAD_RESULT: -3}" = "201" ]; then
              echo "✅ successfully updated hash for $version"
            else
              echo "❌ failed to update hash for $version (HTTP ${UPLOAD_RESULT: -3})"
              echo "api response: ${UPLOAD_RESULT%???}"
              exit 1
            fi
          done

          echo "all hash updates completed successfully"
